<?xml version="1.0" encoding="UTF-8"?><search><entry><title>Swift语言特性之-PropertyWrapper</title><link href="/posts/property-wrapper"/><url>/posts/property-wrapper</url><content type="html"><![CDATA[<h1>Swift语言特性之-PropertyWrapper</h1><p>是版本引入的新特性，顾名思义，就是属性的包装器。为什么要包装属性呢？因为有时候需要对属性进行逻辑处理</p><p>举例说明：</p><p>App的设置选项里面通常有语言设置、主题设置、字体设置等，所以通常我们会定义一个类来专门进行管理，同时为了保证每次启动App都能记录之前的设置，我们通常会通过来进行持久化处理，代码如下</p><pre></pre><p>看起来不错，但我们仔细观察会发现，我们的每个属性里的方法，逻辑都非常类似，如果后面增加了新的属性，我们要做的就是 copy 上面的某个属性的 get set 方法，然后改一下属性名称以及对应的key，随着属性的增多，就会有大量的逻辑相似的代码，同时可维护性会变差，如果将来想换一种持久化的方法，这将是一场灾难。</p><p>那有什么办法能进行优化吗？没错，这就是我们今天讲的主题</p><p>使用首先需要通过进行声明，同时我们需要把逻辑相似的代码进行抽象，我们发现，每个方法有两个差异点</p><p>1、不一样</p><p>2、属性类型不一样</p><p>如何解决呢？</p><p>1、不一样，我们可以把 key 抽象为的一个属性</p><p>2、属性类型不一样，我们可以引入泛型</p><p>代码如下</p><pre></pre><p>我们定义了，其中就是我们要包装的属性值，我们把逻辑已经抽象到了 里，如何使用呢？代码如下</p><pre></pre><p>代码是不是瞬间变的清爽了，到目前为止我们的主题基本上就讲完了，后面部分是代码的优化</p><p>属性为类型，使用时不是很方便，因为一旦没有取到值，我们需要设置一个默认值，如何优化呢？</p><p>我们可以将的类型改为，同时在方法里提供一个默认值，这里我们引入属性，代码如下</p><pre></pre><p>这样我们在使用时，就可以这样，代码如下</p><pre></pre><p>我们想一想到这里还有问题吗？🤔</p><p>虽然我们定义了泛型，但请注意可以是任意类型，也包括可选型，比如</p><pre></pre><p>针对这种情况，我们在代码里设置的是多余的，因为不论把设置为何值，我们默认取到的都是 nil，这也很好理解，因为 是，所以永远也不会走到 </p><p>那有没有办法把参数去掉呢？</p><p>通过，该协议表示可以用来初始化一个实例，而遵守了</p><pre></pre><p>这样就可以设置了</p><pre></pre><p>还有其他问题吗？是的，如果给 language 设置为nil，会crash ❌ ，所以需要对方法进行 nil 判断，直接上代码</p><pre></pre><p>现实给了一记响亮的耳光，这个判断没有鸟用，编译器认为不会是nil，所以  永远不满足，怎么办呢？我们可以换一个思路</p><pre></pre><p>通过声明一个包含有的协议，并让实现这个协议，通过来间接判断是不是，然后通过来判断是不是nil</p><p>到这里我们终于把遇到的问题都解决了，希望对你有帮助</p><p>参考链接：<a href="https://www.swiftbysundell.com/articles/property-wrappers-in-swift/">https://www.swiftbysundell.com/articles/property-wrappers-in-swift/</a></p>]]></content><tag>feature</tag></entry><entry><title>My first post</title><link href="/posts/second-post"/><url>/posts/second-post</url><content type="html"><![CDATA[<h1>My first post</h1><p>My first post's text.</p><pre></pre>]]></content><tag>first</tag><tag>article</tag></entry></search>