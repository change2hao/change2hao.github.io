<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Blog</title><description></description><link>https://your-website-url.com</link><language>en</language><lastBuildDate>Thu, 18 Feb 2021 11:42:30 +0800</lastBuildDate><pubDate>Thu, 18 Feb 2021 11:42:30 +0800</pubDate><ttl>250</ttl><atom:link href="https://your-website-url.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://your-website-url.com/posts/swift-property-wrapper</guid><title>Swift语言特性之-PropertyWrapper</title><description>什么是 PropertyWrapper？PropertyWrapper能给我们的代码带来哪些好处呢，希望看完之后能带给你答案</description><link>https://your-website-url.com/posts/swift-property-wrapper</link><pubDate>Wed, 13 Jan 2021 22:13:00 +0800</pubDate><content:encoded><![CDATA[<h1>Swift语言特性之-PropertyWrapper</h1><p><code>PropertyWrapper</code>是<code>Swift5.1</code>版本引入的新特性，顾名思义，就是属性的包装器。为什么要包装属性呢？因为有时候需要对属性进行逻辑处理</p><h2>案例</h2><p>App的设置选项里面通常有语言设置、主题设置、字体设置等，所以通常我们会定义一个类来专门进行管理，同时为了保证每次启动App都能记录之前的设置，我们通常会通过<code>UserDefaults</code>来进行持久化处理，代码如下</p><pre><code><span class="keyword">let</span> kSettingsLanguage = <span class="string">"kSettingsLanguage"</span>
<span class="keyword">let</span> kSettingsFontsize = <span class="string">"kSettingsFontsize"</span>
<span class="keyword">let</span> kSettingsTheme = <span class="string">"kSettingsTheme"</span>

<span class="comment">// 注意⚠️ ：set 方法没有对 nil 进行判断，有风险，文章最后会讲到解决办法</span>

<span class="keyword">public class</span> GlobalSettings {
    <span class="comment">//当前语言</span>
    <span class="keyword">public static var</span> language: <span class="type">String</span>? {
        <span class="keyword">get</span> {
            <span class="keyword">return</span> <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">object</span>(forKey: kSettingsLanguage) <span class="keyword">as</span>? <span class="type">String</span>
        }
        <span class="keyword">set</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">set</span>(newValue, forKey: kSettingsLanguage)
        }
    }
    <span class="comment">//当前字号</span>
    <span class="keyword">public static var</span> fontSize: <span class="type">Int</span>? {
        <span class="keyword">get</span> {
            <span class="keyword">return</span> <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">object</span>(forKey: kSettingsFontsize) <span class="keyword">as</span>? <span class="type">Int</span>
        }
        <span class="keyword">set</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">set</span>(newValue, forKey: kSettingsFontsize)
        }
    }
    <span class="comment">//当前主题</span>
    <span class="keyword">public static var</span> theme: <span class="type">String</span>? {
        <span class="keyword">get</span> {
            <span class="keyword">return</span> <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">object</span>(forKey: kSettingsTheme) <span class="keyword">as</span>? <span class="type">String</span>
        } <span class="keyword">set</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">set</span>(newValue, forKey: kSettingsTheme)
        }
    }
}
</code></pre><h2>抛出问题</h2><p>看起来不错，但我们仔细观察会发现，我们的每个属性里的<code>get set</code>方法，逻辑都非常类似，如果后面增加了新的属性，我们要做的就是 copy 上面的某个属性的 get set 方法，然后改一下属性名称以及对应的key，随着属性的增多，就会有大量的逻辑相似的代码，同时可维护性会变差，如果将来想换一种持久化的方法，这将是一场灾难。</p><h2>解决方案</h2><p>那有什么办法能进行优化吗？没错，这就是我们今天讲的主题</p><p>使用<code>propertyWrapper</code>首先需要通过<code>@propertyWrapper</code>进行声明，同时我们需要把逻辑相似的代码进行抽象，我们发现，每个<code>set get</code>方法有两个差异点</p><p>1、<code>key</code>不一样</p><p>2、属性类型不一样</p><p>如何解决呢？</p><p>1、<code>key</code>不一样，我们可以把 key 抽象为<code>propertyWrapper</code>的一个属性</p><p>2、属性类型不一样，我们可以引入泛型</p><p>代码如下</p><pre><code><span class="keyword">@propertyWrapper struct</span> UserDefaultWrapper&lt;T&gt; {
    <span class="keyword">var</span> key: <span class="type">String</span>
    <span class="comment">// wrappedValue 里的逻辑即为上面代码中，每个属性里的逻辑</span>
    <span class="keyword">var</span> wrappedValue: <span class="type">T</span>? {
        <span class="keyword">get</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">object</span>(forKey: key) <span class="keyword">as</span>? <span class="type">T</span>
        }
        <span class="keyword">set</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">setValue</span>(newValue, forKey: key)
        }
    }
}
</code></pre><p>我们定义了<code>UserDefaultWrapper</code>，其中<code>wrappedValue</code>就是我们要包装的属性值，我们把逻辑已经抽象到了 <code>UserDefaultWrapper</code>里，如何使用呢？代码如下</p><pre><code><span class="keyword">struct</span> GlobalSettings {
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsLanguage) <span class="keyword">static var</span> language: <span class="type">String</span>?
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsFontsize) <span class="keyword">static var</span> fontSize: <span class="type">Int</span>?
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsTheme) <span class="keyword">static var</span> theme: <span class="type">String</span>?
}
</code></pre><p>代码是不是瞬间变的清爽了，到目前为止我们的主题基本上就讲完了，后面部分是代码的优化</p><p>属性为<code>Optional</code>类型，使用时不是很方便，因为一旦没有取到值，我们需要设置一个默认值，如何优化呢？</p><p>我们可以将<code>wrapperValue</code>的类型改为<code>T</code>，同时在<code>get</code>方法里提供一个默认值，这里我们引入<code>defaultValue</code>属性，代码如下</p><pre><code><span class="keyword">@propertyWrapper struct</span> UserDefaultWrapper&lt;T&gt; {
    <span class="keyword">var</span> key: <span class="type">String</span>
    <span class="keyword">var</span> defaultValue: <span class="type">T</span>
    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> {
        <span class="keyword">get</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">object</span>(forKey: key) <span class="keyword">as</span>? <span class="type">T</span> ?? defaultValue
        }
        <span class="keyword">set</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">setValue</span>(newValue, forKey: key)
        }
    }
}
</code></pre><p>这样我们在使用时，就可以这样，代码如下</p><pre><code><span class="keyword">struct</span> GlobalSettings {
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsLanguage, defaultValue:<span class="string">"zh"</span>) <span class="keyword">static var</span> language: <span class="type">String</span>
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsFontsize, defaultValue:<span class="number">16</span>) <span class="keyword">static var</span> fontSize: <span class="type">Int</span>
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsTheme, defaultValue:<span class="string">"light"</span>) <span class="keyword">static var</span> theme: <span class="type">String</span>
}
</code></pre><p>我们想一想到这里还有问题吗？🤔</p><p>虽然我们定义了泛型<code>T</code>，但请注意<code>T</code>可以是任意类型，也包括可选型，比如</p><pre><code><span class="comment">//注意⚠️ 这里面的language被定义为了Optinal</span> 
<span class="keyword">struct</span> GlobalSettings {
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsLanguage, defaultValue:<span class="string">"zh"</span>) <span class="keyword">static var</span> language: <span class="type">String</span>?
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsFontsize, defaultValue:<span class="number">16</span>) <span class="keyword">static var</span> fontSize: <span class="type">Int</span>
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsTheme, defaultValue:<span class="string">"light"</span>) <span class="keyword">static var</span> theme: <span class="type">String</span>
} 
</code></pre><p>针对这种情况，我们在代码里设置的<code>defaultValue</code>是多余的，因为不论把<code>defaultValue</code>设置为何值，我们默认取到的都是 nil，这也很好理解，因为<code>T</code> 是<code>Optional</code>，所以<code>UserDefaults.standard.object(forKey: key) as? T ?? defaultValue</code>永远也不会走到 <code>?? defaultValue</code></p><p>那有没有办法把<code>defaultValue</code>参数去掉呢？</p><p>通过<code>ExpressibleByNilLiteral</code>，该协议表示可以用<code>nil</code>来初始化一个实例，而<code>Optional</code>遵守了<code>ExpressibleByNilLiteral</code></p><pre><code><span class="keyword">extension</span> <span class="type">UserDefaultWrapper</span> <span class="keyword">where</span> <span class="type">T</span>: <span class="type">ExpressibleByNilLiteral</span>{
    <span class="keyword">init</span>(key: <span class="type">String</span>){
        <span class="keyword">self</span>.<span class="keyword">init</span>(key: key, defaultValue: <span class="keyword">nil</span>)
    }
}
</code></pre><p>这样就可以设置了</p><pre><code><span class="keyword">struct</span> GlobalSettings {
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsLanguage) <span class="keyword">static var</span> language: <span class="type">String</span>?
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsFontsize, defaultValue:<span class="number">16</span>) <span class="keyword">static var</span> fontSize: <span class="type">Int</span>
    <span class="keyword">@UserDefaultWrapper</span>(key: kSettingsTheme, defaultValue:<span class="string">"light"</span>) <span class="keyword">static var</span> theme: <span class="type">String</span>
} 
</code></pre><p>还有其他问题吗？是的，如果给 language 设置为nil，会crash ❌ ，所以需要对<code>set</code>方法进行 nil 判断，直接上代码</p><pre><code><span class="keyword">@propertyWrapper struct</span> UserDefaultWrapper&lt;T&gt; {
    <span class="keyword">var</span> key: <span class="type">String</span>
    <span class="keyword">var</span> defaultValue: <span class="type">T</span>
    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> {
        <span class="keyword">get</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">object</span>(forKey: key) <span class="keyword">as</span>? <span class="type">T</span> ?? defaultValue
        }
        <span class="keyword">set</span> {
        <span class="comment">//⚠️ Comparing non-optinal value of type 'T' to 'nil' always returns false</span>
            <span class="keyword">if</span> newValue == <span class="keyword">nil</span> {
                <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">removeObject</span>(forKey: key)
            }<span class="keyword">else</span> {
                <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">setValue</span>(newValue, forKey: key)
            }
        }
    }
}
</code></pre><p>现实给了一记响亮的耳光，这个判断没有鸟用，编译器认为<code>newValue</code>不会是nil，所以 <code>newValue == nil</code> 永远不满足，怎么办呢？我们可以换一个思路</p><pre><code><span class="comment">//我们声明一个协议</span>
<span class="keyword">private protocol</span> AnyOptional {
    <span class="keyword">var</span> isNil: <span class="type">Bool</span> { <span class="keyword">get</span> }
}
<span class="comment">//让 Optional 实现这个协议</span>
<span class="keyword">extension</span> <span class="type">Optional</span>: <span class="type">AnyOptional</span> {
    <span class="keyword">var</span> isNil: <span class="type">Bool</span> {
        <span class="keyword">self</span> == <span class="keyword">nil</span>
    }
}

<span class="keyword">@propertyWrapper struct</span> UserDefaultWrapper&lt;T&gt; {
    <span class="keyword">let</span> key: <span class="type">String</span>
    <span class="keyword">let</span> defaultValue: <span class="type">T</span>    
    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> {
        <span class="keyword">get</span> {
            <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">value</span>(forKey: key) <span class="keyword">as</span>? <span class="type">T</span> ?? defaultValue
        }
        <span class="keyword">set</span> {
            <span class="keyword">if let</span> optional = newValue <span class="keyword">as</span>? <span class="type">AnyOptional</span>, optional.<span class="property">isNil</span> {
                <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">removeObject</span>(forKey: key)
            } <span class="keyword">else</span> {
                <span class="type">UserDefaults</span>.<span class="property">standard</span>.<span class="call">setValue</span>(newValue, forKey: key)
            }
        }
    }
} 
</code></pre><p>声明一个包含有<code>isNil</code>的协议，并让<code>Optional</code>实现这个协议，通过<code>if let optional = newValue as? AnyOptional</code>来间接判断是不是<code>Optional</code>，然后通过<code>optional.isNil</code>来判断是不是nil</p><p>到这里我们终于把遇到的问题都解决了，希望对你有帮助</p><h2>参考链接</h2><p><a href="https://www.swiftbysundell.com/articles/property-wrappers-in-swift/">https://www.swiftbysundell.com/articles/property-wrappers-in-swift/</a><br><a href="https://www.avanderlee.com/swift/property-wrappers/">https://www.avanderlee.com/swift/property-wrappers/</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://your-website-url.com/posts/website-use-publish</guid><title>使用 Publish 搭建静态博客</title><description>现在静态网站生成框架百花齐放，笔者先后尝试过JekyII hexo hugo vuepress，而现在我开始使用一个全新框架 Publish，当然这次不是为了一时兴起，是什么原因让我转头Publish怀抱，本篇文章给你答案.</description><link>https://your-website-url.com/posts/website-use-publish</link><pubDate>Wed, 13 Jan 2021 22:13:00 +0800</pubDate><content:encoded><![CDATA[<h1>使用 Publish 搭建静态博客</h1><h2>Publish 是什么？</h2><p><a href="https://github.com/JohnSundell/Publish">Publish</a>是一款静态网站生成器。它使用Swift构建整个网站，并支持主题、插件和其他大量的定制选项。</p><h2>为什么要使用 Publish</h2><p>接触到Publish是因为它的作者John Sundell，John Sundell 是国外Swift领域的技术大牛，发表了大量高质量的技术文章，笔者也从中受益匪浅，他的文章发布在 <a href="https://www.swiftbysundell.com/">Swift by Sundell</a>。这个站点正是使用他亲手开发的Publish框架来构建的。</p><p>Publish最吸引我的地方是整个框架全部由Swift进行构建，Swift语言是我目前主力开发语言，所以Publish让我感到非常亲切，对站点的定制化需求也会更得心应手，这种完全自己掌控的感觉太好了。</p><h2>如何使用 Publish</h2><h3>安装</h3><p>同大量的其他静态网站生成器一样，Publish提供了CLI。通过命令行快速完成创建模板、内容更新、远程发布等一系列操作 安装方式可以通过 brew 安装也可以通过源代码安装，这里使用 brew 安装 <code>brew install publish</code></p><h3>创建站点</h3><p>创建一个 Blog 站点</p><pre><code>mkdir blog
cd blog
publish new
</code></pre><p>Publish 会自动创建项目模版，结构如下：</p><pre><code>|-- blog
|   |-- <span class="type">Content</span>
|           |–– posts
|                 |–– first-post.<span class="property">md</span>
|                 |–– index.<span class="property">md</span>
|           |–– index.<span class="property">md</span>
|   |-- <span class="type">Resources</span>
|   |-- <span class="type">Sources</span>
|           |–– blog
|                  |–– main.<span class="property">swift</span>
</code></pre><p>Content目录存放markdown源文件 Resource目录存放资源文件，比如css 图片等 Source目录存放构建网站的源代码文件，比如main.swift里定义了站点的框架结构、主题选择以及站点生成的各种工作流，当然可以在这个目录里做各种扩展操作，比如自定义一个插件、主题等</p><h3>运行和调试</h3><p>Swift是编译型语言，代码每次修改之后，都需在本机编译并运行</p><pre><code>publish run
</code></pre><p>第一次运行，Publish会自动从Github上获取依赖的三方库，然后会看到如下信息</p><pre><code>publish run
...
<span class="type">Publishing</span> blog (<span class="number">6</span> steps)
[<span class="number">1</span>/<span class="number">6</span>] <span class="type">Copy</span> '<span class="type">Resources</span>' files
[<span class="number">2</span>/<span class="number">6</span>] <span class="type">Add Markdown</span> files from '<span class="type">Content</span>' folder
[<span class="number">3</span>/<span class="number">6</span>] <span class="type">Sort</span> items
[<span class="number">4</span>/<span class="number">6</span>] <span class="type">Generate HTML</span>
[<span class="number">5</span>/<span class="number">6</span>] <span class="type">Generate RSS</span> feed
[<span class="number">6</span>/<span class="number">6</span>] <span class="type">Generate</span> site map
✅ <span class="type">Successfully</span> published blog
🌍 <span class="type">Starting</span> web server at http://localhost:<span class="number">8000</span>

<span class="type">Press ENTER</span> to stop the server and exit
</code></pre><p>用浏览器访问 http://localhost:8000 就可以看到新站点了，网站的所有内容放置在了Output目录。 如果要发布到 github page，只需要添加 <code>.deploy(using: .gitHub("username/username.github.io"))</code> <em>username为github的用户名</em>，然后执行</p><pre><code>publish deploy
</code></pre><p>便可将内容发布上去，这个框架的介绍和使用就说到这里，关于Publish中涉及的概念以及如何定制化后面会专门讲解</p><h3>感想</h3><p>文章最后说说笔者的一些感想吧，我从2012年第一次用 JekyII 来搭建的我的博客，转眼间九年过去了，这期间我更换过很多框架 从<code>JekyII</code> <code>hexo</code> <code>hugo</code> <code>vuepress</code> 到现在的 <code>Publish</code>，爱折腾是程序猿的天性，但是搭建站点只是提供一个写作平台，持续输出有价值的内容，能够帮助影响到他人，这才是最重要的，我们一起共勉。</p>]]></content:encoded></item><item><guid isPermaLink="true">https://your-website-url.com/posts/website-use-hugo</guid><title>使用 Hugo + Travis CI + Github Pages 搭建静态博客</title><description>搭建静态博客的框架有很多，这次尝试下Hugo，并搭配CI让你体验升级，让我们开始吧</description><link>https://your-website-url.com/posts/website-use-hugo</link><pubDate>Mon, 16 Jul 2018 20:04:00 +0800</pubDate><content:encoded><![CDATA[<h1>使用 Hugo + Travis CI + Github Pages 搭建静态博客</h1><p>最近花了点时间把几年前搭建的博客进行了重建，重建之后的感觉简直爽极了，就好像装修完的新家一样让人赏心悦目，同时有强大的 Travis CI 加持，就好像身边有一位贴心的管家，幸福指数上升了一个高度。下面步入正题</p><h2>Hugo 介绍</h2><p>目前搭建静态博客的工具有很多，有人专门整理了一个 <a href="https://www.staticgen.com">列表</a> 可以了解下，这里简单说一下 <strong>Hugo</strong>， 它是一种开源的静态站点生成器框架。何为静态站点生成器呢？就是说基于简单的文本内容即可生成可以直接在浏览器访问的 html 网页，对于 Hugo 来说，文本内容即采用 Markdown 语法的 <strong>md</strong> 源文件。Hugo 采用 GO 语言编写，最突出的优点就是执行效率高。</p><h2>Travis CI 介绍</h2><p><a href="https://travis-ci.org">Travis CI</a> 是一个持续集成服务，用于构建和部署项目。何为持续集成呢？就是说项目代码在发生改动的时候会<strong>自动</strong>构建和部署，确保项目的正常运行。针对 Github 上的开源项目，Travis CI 提供免费的服务，下面再说一下 Github Pages。</p><h2>Github Pages 介绍</h2><p><a href="https://pages.github.com">Github Pages</a> 是 Github 提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。</p><p>下面来说一下用 Hugo 配合 Travis CI 和 Github Pages 来搭建博客的过程</p><h2>搭建博客的流程</h2><h3>#0 在 Github 创建一个用于托管站点的仓库</h3><p>Hugo 官网有一个 <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">说明文档</a>，里面提到了两种情况，对应的网址有些不同。</p><p><code>User/Organization Pages (https://&lt;USERNAME|ORGANIZATION&gt;.github.io/)</code><br><code>Project Pages (https://&lt;USERNAME|ORGANIZATION&gt;.github.io/&lt;PROJECT&gt;/)</code></p><p>笔者选择了 <strong>Project Pages</strong>，因为文档里说 <strong>User/Organization Pages</strong> 类型只能将站点内容部署到主分支，而后面 的 Travis CI 部署默认是在 gh-pages 分支。</p><h3>#1 使用 Hugo 在本地创建一个站点</h3><p>Hugo 官网给出了一个快速搭建的 <a href="https://gohugo.io/getting-started/quick-start/">指南</a>，直接按照此文档一步步操作即可。</p><h3>#2 将生成的本地文件推送到 Github 仓库</h3><p>可以参考 <a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/">这里</a> 来完成此操作</p><h3>#3 创建 Github Personal Access Token</h3><p>在下面的步骤中，需要在 Travis 配置 Github 的 Personal Access Token，参考 <a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/">这里</a> 来完成此操作</p><h3>#4 登录 Travis CI 并关联指定 Github 仓库</h3><p>访问 <a href="https://travis-ci.com/">官网</a>，点击右上角的 <strong>Sign in with GitHub</strong>，通过输入 Github 密码来完成 Travis CI 的登录，通过 Github 的授权后，Travis CI 即可访问 Github 里的仓库，登陆进去的界面是这样</p><img src="https://your-website-url.com/images/20190720055123.png"/><p>点击 <strong>Activate</strong> 按钮，如图，选择对应的仓库</p><img src="https://your-website-url.com/images/20190720055632.png"/><p>选中 <strong>Only select repositories</strong>，并在下拉菜单中选中对应 repo，然后点击 <strong>Approve &amp; Install</strong>，页面会进行刷新，如图</p><img src="https://your-website-url.com/images/20190720055713.png"/><p>然后点击出现的 blog 条目，进入后设置 Github Personal Access Token，如图 <img src="https://your-website-url.com/images/20190720055829.png"/></p><h3>#5 配置 Travis CI</h3><p>Travis CI 是通过 <strong>.travis.yml</strong> 文件来进行配置的。首先在本地站点根目录下创建 .travis.yml 文件，详细的配置说明可以在 <a href="https://docs.travis-ci.com/user/customizing-the-build">这里</a> 查看，比较欣喜的是 Travis 已经提供了对 Github Pages 的部署支持，可以看 <a href="https://docs.travis-ci.com/user/deployment/pages/">这里</a>，所以我们要做的就是先执行 hugo 命令来重新生成站点，然后进行部署即可，整个脚本如下：</p><pre><code>install:
  - rm -rf <span class="keyword">public</span> || exit <span class="number">0</span>
# <span class="type">Build</span> the website
script:
  - binary/hugo
# <span class="type">Deploy</span> to <span class="type">GitHub</span> pages
deploy:
  provider: pages
  skip_cleanup: <span class="keyword">true</span>
  github_token: $GITHUB_TOKEN
  local_dir: <span class="keyword">public</span>
  on:
    branch: master
</code></pre><p>这里面有几点进行说明</p><ul><li>script 部分，需要我们到 hugo 的 <a href="https://github.com/gohugoio/hugo/releases">下载地址</a> 选择 <strong>hugo<em>0.44</em>Linux-64bit.tar.gz</strong> 进行下载，并解压，将其二进制文件拷贝到仓库根目录下的 binary 文件夹下，binary 如果没有，自己创建一个。</li><li>local_dir: 设置为 public 是因为在执行 hugo 命令时会自动生成public目录，该目录下的文件即最终的站点文件。对 Github Pages 部署的时候也是部署的该文件夹下的文件。由于每次部署该文件夹下的文件都会重新生成，所以我们创建一个 .gitignore 文件，并将 <code>public</code> 添加进去，这样就不会纳入git的版本管理范畴。接下来在仓库根目录下执行</li></ul><pre><code>git add .
git commit -m <span class="string">"config travis.ci"</span>
git push -u origin master
</code></pre><p>当 push 成功后，就会启动 Travis 的 CI 脚本，进入 Travis 的网页控制台看一下，如图</p><img src="https://your-website-url.com/images/20190720060654.png"/><p>这说明脚本已经构建成功了，此时 travis 会自动在 github 的 blog 仓库下创建了一个 gh-pages 分支，并将 public 目录下的代码提交到了该分支，如图</p><img src="https://your-website-url.com/images/20190720060847.png"/><h3>#6 配置 Github Pages</h3><p>下面回到 github，在仓库的 Settings 选项下，找到 Github Pages 设置，如图</p><img src="https://your-website-url.com/images/20190720061545.png"/><p>，其中 Source 会默认配置成 <strong>gh-pages branch</strong>，下面可以设置自定义域名，自定义域名之后再说。</p><h2>验收成果</h2><p>好了，到目前为止，工作基本上就完成了，那么每次写博客的流程是什么样子的呢？</p><pre><code>hugo new post/xxx.<span class="property">md</span>
git add .
git commit -m <span class="string">"xxx"</span>
git push -u origin master
</code></pre><p>这就可以了，博客的构建和部署直接交给了 Travis CI 来完成，是不是很爽？就到这里，希望对你有帮助</p>]]></content:encoded></item><item><guid isPermaLink="true">https://your-website-url.com/posts/gitlab-tutorial</guid><title>使用 gitlab 搭建代码托管平台</title><description>开发团队中如何更好的进行代码管理和协作，如何免费搭建一台代码托管平台，这篇文章会给你答案</description><link>https://your-website-url.com/posts/gitlab-tutorial</link><pubDate>Thu, 5 Mar 2015 23:03:00 +0800</pubDate><content:encoded><![CDATA[<h1>使用 gitlab 搭建代码托管平台</h1><p><a href="https://github.com">github</a>是目前最为流行的代码托管平台，很多著名的开源项目都在github上进行托管。但github只能免费托管公有项目，如果要托管私有项目就要缴纳不菲的费用。而且github服务器在国外，很难保证网络的稳定。为了保证代码的安全和可控，公司更倾向于自建代码服务器。</p><h2>gitlab是什么</h2><blockquote><p>Version Control on your Server like GitHub but Open Source</p></blockquote><p>一句话，gitlab就是github的开源实现。它的特点如下：</p><ul><li>git仓库管理，代码审查，问题追踪，活动信息，维基和持续集成。</li><li>容纳25000+的用户群同时在一台服务器上。LDAP/AD组同步和日志审计。</li><li>社区驱动，700+贡献者，检查完善代码，方便集成。</li><li>如果不想手动搭建gitlab，可以看<a href="https://about.gitlab.com/pricing/#gitlab-com">这里</a></li></ul><h2>如何搭建</h2><h3>部署环境ubuntu14.04 server版操作系统</h3><p>我们公司主机CPU是32位的，所以下载32位的ubuntu镜像。下载地址在<a href="http://www.ubuntu.org.cn/download/server">这里</a>，安装过程就不说了，我是用光驱引导安装的，当然也有其他方法。</p><h3>安装openssh-server</h3><p>为什么要安装它呢？<code>openssh-server</code>主要用于其他终端远程连接服务器。默认ubuntu14.04系统只有<code>openssh-client</code>，而<code>openssh-server</code>需要自己安装。怎么看系统有没有安装ssh呢，通过如下命令：<code>dpkg --list|grep ssh</code>，如果有的话，控制台会列出<code>openssh-client</code>和<code>openssh-server</code>，说明已经安装了，如果没有<code>openssh-server</code>，需要通过如下命令安装<code>sudo apt-get install openssh-server</code>，结果在安装这个的时候报错</p><pre><code><span class="type">Reading</span> package lists... <span class="type">Done
Building</span> dependency tree
<span class="type">Reading</span> state information... <span class="type">Done
Package</span> openssh-server <span class="keyword">is</span> not available,but <span class="keyword">is</span> referred to by another package. <span class="type">This</span> may mean that the package <span class="keyword">is</span> missing, has been obsoleted, is only available from another source
<span class="type">E</span>: <span class="type">Package</span> 'openssh-server' has no installation candidate
</code></pre><p>google了一下，解决方案是更新包</p><pre><code>sudo apt-<span class="keyword">get</span> update
sudo apt-<span class="keyword">get</span> upgrade
</code></pre><p>结果又报了如下错误：</p><pre><code><span class="type">Reading</span> package lists... <span class="type">Done
Building</span> dependency tree
<span class="type">Reading</span> state information... <span class="type">Done
Some</span> packages could not be install.  <span class="type">This</span> may mean that you have requested an impossible situation or <span class="keyword">if</span> you are using the unstable distribution that <span class="keyword">some required</span> packages have not yet been created or been moved out of <span class="type">Incoming</span>.
<span class="type">The</span> following information may help to resolve the situation:

<span class="type">The</span> following packages have unmet dependencies:
openssh-server : <span class="type">Depends</span>: <span class="call">libwrap0</span>(&gt;= <span class="number">7.6</span>-<span class="number">4</span>~) but it <span class="keyword">is</span> not installable

<span class="type">Unable</span> to correct problems, you have held broken packages.
</code></pre><p>控制台提示的意思是，安装<code>openssh-server</code>要依赖<code>libwrap0</code>这个库，于是我就又执行了<code>sudo apt-get install libwrap0</code>。结果又打印了一堆类似错误，提示又要依赖其他的库，于是觉的不对劲了，又google了一下，找到了原因，是因为在<code>sudo apt-get update</code>的时候没有update完全。遇到了 <strong>"Hash sum mismatch"</strong> error。怎么解决呢？</p><pre><code>sudo rm -rf /<span class="keyword">var</span>/lib/apt/lists<span class="comment">/*   //首先清空/var/lib/apt/lists/目录，然后更新
sudo apt-get update</span>
</code></pre><p>然后<code>openssh-server</code>就顺利安装上了，网上解决方案地址在<a href="http://askubuntu.com/questions/575639/cant-get-anything-to-install-dependency-errors">这里</a>。 如何判断sshserver是否启动了呢？</p><pre><code>ps -e | grep ssh
</code></pre><p>如果只有<code>ssh-agent</code>，那说明<code>ssh-server</code>还没有启动，需要</p><pre><code>/etc/<span class="keyword">init</span>.<span class="property">d</span>/ssh start
</code></pre><p><code>ssh-server</code>配置文件位于<code>/ etc/ssh/sshd_config</code>，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，如222。然后重启SSH服务：</p><pre><code>sudo /etc/<span class="keyword">init</span>.<span class="property">d</span>/ssh resart
</code></pre><p>一般情况下用默认端口就行，操作完毕，这样我就可以在自己的电脑上通过ssh远程链接主机服务器了。</p><h3>安装gitlab包</h3><p>在安装gitlab包的时候又遇到个麻烦，gitlab官网的<a href="https://about.gitlab.com/downloads/">下载页面</a>根本没有提供任何32位的包，全部是amd64。我立马郁闷了，好不容易到这儿了，难道还要换台64位的主机。为了给公司少找麻烦，我还是自己先找找有没有什么workaround吧，功夫不负有心人，终于找到了一个方案<a href="https://bitnami.com/stack/gitlab">bitnami gitlab</a>，提供一键式安装gitlab，最主要支持32位，太棒了！操作很简单</p><p>第一步下载<a href="https://bitnami.com/stack/gitlab/installer">installer</a></p><pre><code>wget https://downloads.<span class="property">bitnami</span>.<span class="property">com</span>/files/stacks/gitlab/<span class="number">7.6.2</span>-<span class="number">0</span>/bitnami-gitlab-<span class="number">7.6.2</span>-<span class="number">0</span>-linux-installer.<span class="property">run</span>
</code></pre><p>第二步安装installer</p><pre><code>chmod <span class="number">744</span> bitnami-gitlab-<span class="number">7.6.2</span>-<span class="number">0</span>-linux-installer.<span class="property">run</span> <span class="comment">//这步很关键，否则提示 command not found</span>
./bitnami-gitlab-<span class="number">7.6.2</span>-<span class="number">0</span>-linux-installer.<span class="property">run</span>
</code></pre><p>接下来就是一步一步安装了，需要配置很多信息，具体配置说明可以看<a href="https://bitnami.com/stack/gitlab/README.txt">这里</a></p><p>等配置完了，我在自己电脑浏览器输入 192.168.30.196 ，神奇的事情发生啦，gitlab服务器跑起来了。输入用户名，密码即可登录。</p><h3>gitlab邮件系统</h3><p>gitlab内置邮件系统，这样用户在执行相关操作的时候会自动发邮件来通知相关成员。 这个功能很赞，下面说一下配置流程：</p><p>1 首先申请一个新的邮箱 <code>xxx@163.com</code>。</p><p>2 <code>sudo vi /opt/gitlab-7.6.2-0/apps/gitlab/htdocs/config/environments/production.rb</code></p><p>修改如下信息：</p><pre><code>config.<span class="property">action_mailer</span>.<span class="property">smtp_settings</span> = {
:address =&gt; <span class="string">"smtp.qiye.163.com"</span>,
:port =&gt; <span class="string">"25"</span>,
:domain =&gt; <span class="string">"163.com"</span>,
:authentication =&gt; :plain,
:user_name =&gt; <span class="string">"xxx@163.com"</span>,
:password =&gt; <span class="string">"your password"</span>,
:enable_starttls_auto =&gt; <span class="keyword">false</span>
}
</code></pre><p>3 <code>sudo vi /opt/gitlab-7.6.2-0/apps/gitlab/htdocs/config/gitlab.yml</code></p><p>找到<code>email_from:</code>这一行，改成 <code>email_from: xxx@163.com</code></p><p>4 重启gitlab服务: <code>sudo /opt/gitlab-7.6.2-0/ctlscript.sh restart gitlab_sidekiq</code></p><h3>修改服务器IP地址</h3><p>如果全部按照默认选项安装，创建一个project，生成的仓库地址是这样的：<code>git@127.0.0.1:username/test.git</code>，这显然不对，因为这是本机地址，而开发人员做<code>git clone</code>操作时，是在自己的电脑上完成的，如何配置服务器IP地址？ 在gitlab.yml这个配置文件中定位到<code>host:</code>，设置IP即可 。</p><p>sudo vi /opt/gitlab-7.6.2-0/apps/gitlab/htdocs/config/gitlab.yml</p><pre><code>## <span class="type">GitLab</span> settings
gitlab:
## <span class="type">Web</span> server settings (note: host <span class="keyword">is</span> the <span class="type">FQDN</span>, do not include http://)
host: <span class="number">192.168.30.196</span> <span class="comment">//把这里改成服务器ip就可以了</span>
port: <span class="number">80</span> # <span class="type">Set</span> to <span class="number">443</span> <span class="keyword">if</span> using <span class="type">HTTPS</span>, see installation.<span class="property">md#using</span>-https <span class="keyword">for</span> additional <span class="type">HTTPS</span> configuration details
</code></pre><p>重启gitlab服务: <code>sudo /opt/gitlab-7.6.2-0/ctlscript.sh restart gitlab_sidekiq</code></p><h3>设置gitlab开机自启动</h3><p>除了这些还有什么需要做吗？那就是开机自启动，这样可以保证服务器因为各种原因重启后，gitlab服务持续可用。</p><pre><code>sudo cp /opt/gitlab-<span class="number">7.6.2</span>-<span class="number">0</span>/ctlscript.<span class="property">sh</span> /etc/<span class="keyword">init</span>.<span class="property">d</span>/bitnami-gitlab
sudo update-rc.<span class="property">d</span> -f bitnami-gitlab start <span class="number">80 2 3 4 5</span> . <span class="property">stop</span> <span class="number">30 0 1 6</span> .
</code></pre>]]></content:encoded></item></channel></rss>